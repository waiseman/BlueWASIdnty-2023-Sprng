@page "/manageuser"
@using BlueWASIdnty.Server.Models
@using Microsoft.AspNetCore.Authorization;

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Identity;
@inject HttpClient Http


@inject AuthenticationStateProvider AuthenticationStateProvider


<table class="table">

    <thead>

        <tr>

            <th>Id</th>

            <th>User Name</th>

            <th>Email</th>

        </tr>

    </thead>

    <tbody>

        @foreach (var user in ColUsers)

        {

            <tr>

                <td>@user.Id.Substring(0, 5) ...</td>

                <td>@user.UserName</td>

                <td>@user.Email</td>

                <td>

                    <!-- Edit the current forecast -->

                <button class="btn btn-primary"
                        @onclick="(() => EditUser(user))">

                        Edit

                    </button>

                </td>

            </tr>

        }

    </tbody>

</table>

@if (ShowPopup)

{

    <!-- This is the popup to create or edit a user -->

    <div class="modal" tabindex="-1" style="display:block" role="dialog">

        <div class="modal-dialog">

            <div class="modal-content">

                <div class="modal-header">

                    <h3 class="modal-title">Edit User</h3>

                    <!-- Button to close the popup -->

                <button type="button" class="close"
                        @onclick="ClosePopup">

                        <span aria-hidden="true">X</span>

                    </button>

                </div>

                <!-- Edit form for the current user -->

            <div class="modal-body">

                    <!-- Only show Id if not a new user -->
                    @if (UserData.Id != "")

                    {

                        <p>@UserData.Id</p>

                    }

                    <!-- Only allow edit if a new user -->
                    @if (UserData.Id != "")

                    {

                        <p>@UserData.UserName</p>

                    }

                    else

                    {

                        <input class="form-control" type="text"
                       placeholder="UserName"
                       @bind="UserData.UserName" />

                    }

                    <input class="form-control" type="text"
                       placeholder="Email"
                       @bind="UserData.Email" />

                    <input class="form-control" type="password"
                       placeholder="Password"
                       @bind="UserData.PasswordHash" />

                    <select class="form-control"
                        @bind="@SelectedUserRole">

                        @foreach (var option in Options)

                        {

                            <option value="@option">

                                @option

                            </option>

                        }

                    </select>

                    <br /><br />

                    <!-- Button to save the user -->

                <button class="btn btn-primary"
                        @onclick="SaveUser">

                        Save

                    </button>

                    <!-- Only show delete button if not a new record -->
                    @if (UserData.Id != "")

                    {

                        <!-- Button to delete the forecast -->

                        <button class="btn btn-danger"
                        @onclick="DeleteUser">

                            Delete

                        </button>

                    }

                    <br />

                    <span style="color:red">@strError</span>

                </div>

            </div>

        </div>

    </div>

}

<button class="btn btn-success" @onclick="AddNewUser">Add User</button>




@code {
    // Property used to add or edit the currently selected user

    ApplicationUser UserData = new ApplicationUser();

    // Tracks the selected role for the currently selected user

    string SelectedUserRole { get; set; } = "User";

    // Collection to display the existing users

    List<ApplicationUser> ColUsers = new List<ApplicationUser>();

    // Options to display in the roles dropdown when editing a user

    List<string> Options = new List<string>() { "User", "Admin" };

    // To hold any possible errors

    string strError = "";

    // To enable showing the Popup

    bool ShowPopup = false;


    protected override async Task OnInitializedAsync()
    {
        // Get the users

       await GetUsers();

    }
    async Task GetUsers()
    {
        try
        {
            ColUsers = await Http.GetFromJsonAsync<List<ApplicationUser>>("User/GetUsers");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    void AddNewUser()

    {

        // Make new user

        UserData = new ApplicationUser();

        UserData.PasswordHash = "*****";

        // Set Id to blank so we know it is a new record

        UserData.Id = "";



        // Open the Popup

        ShowPopup = true;

    }


    async Task SaveUser()

    {

       //send post Request

    }

    async Task EditUser(ApplicationUser _ApplicationUser)

    {

    

    //    // Open the Popup

    //    ShowPopup = true;

    }

    async Task DeleteUser()

    {

    //    // Close the Popup

    //    ShowPopup = false;

    //    // Get the user

    

    //    if (user != null)

    //    {

    //        // Delete the user


    //    }

    //    // Refresh Users

    //    GetUsers();

    }


    void ClosePopup()

    {

        // Close the Popup

        ShowPopup = false;

    }





}